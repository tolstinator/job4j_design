1. Что такое SOLID?
Principles, those was be formulated Robert Martin, for proper design of software:
    - Single-responsibility principle. A class should only have a single responsibility, that is, only changes to one part of the software's specification should be able to affect the specification of the class.
    - Open–closed principle. Software entities should be open for extension, but closed for modification.
    - Liskov substitution principle. Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.
    - Interface segregation principle. Many client-specific interfaces are better than one general-purpose interface.
    - Dependency inversion principle. One should depend upon abstractions, not concretions.

2. Для чего используются JavaDoc?
В качестве комментария к сущности. В нём описывается цель, алгоритм, трудные для понимания вещи, входные параметры, возвращаемые данные.
Также могут быть описаны метаданные: автор, версия, ссылки и т.д.
Заменяет комментарии внутри сущности. Внутренние комментарии пишутся только в крайней необходимости.
JavaDoc можно вывести стандартными средствами в HTML, для удобства изучения API приложения.

3. Как писать JavaDoc?
Пишется над сущностью, обрамляется /** и */.

4. Что такое Java code convention?
Общие правила оформления и написания исходного кода на языке Java.
Примеры:
    - классы пишутся с большой буквы;
    - экземпляры классов - с маленькой;
    - имена пишутся в CamelCase стиле.
Необходим для того, чтобы программисты могли легко понимать чужой код.

5. Расскажите про принципы составления Java класса.
- fields and properties are private;
- setters begin with "set";
- getters begin with "get" if properties are not boolean type, and "is" if boolean.
- class must have default constructor (without parameters);
- order of element of class:
    - fields and properties;
    - default constructor;
    - other constructors;
    - setters and getters;
    - hashCode() and equals();
    - toString();
    - other methods.

6. Что такое SRP?
Single-responsibility principle. A class should only have a single responsibility, that is, only changes to one part of the software's specification should be able to affect the specification of the class.
Module or class must have only one reason to be changed.

7. Расскажите о нарушениях принципе SRP?
Делают класс, ответственным за ногие вещи. В итоге - он разрастается большим количеством полей и методов.

8. Последствия нарушения SRP?
Очень трудно поддерживать класс, трудно понять на что повлияют вносимые изменения.

9. Что такое OCP?
Open–closed principle. Software entities should be open for extension, but closed for modification.
При добавлении нового функционала приложение долно быть спроектировано таким образом, что мы не правим существующий код, а добавляем новый.

10. Расскажите о нарушениях принципе OCP?
Если класс предназначен для выполнения различных функций в рамках одной цели, то все эти функции реализуют в одном методе.

11. Последствия нарушения OCP?
В последствии, каждый раз, когда понадобиться добавлять функционал, то каждый раз изменяют сам метод. В итоге, он становится очень трудным для понимания его работы. А также очень трудным становится предвидеть, на что в приложении могут повлиять сделанные изменения.

12. Что такое LSP?
Liskov substitution principle. Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.
В коде нужно использовать родительские классы, а при его реализации и создании объектов от дочерних классов, приложение должно работать по задуманной логике.

13. Расскажите о нарушениях принципе LSP?
При проектировании функционала приложения в сигнатурах используют не родительские классы, а подклассы.

14. Последствия нарушения LSP?
В результате, когда необходимо добавить ещё один подкласс, то имеющаяся логика не работает и нужно либо нарушать принцип OCP и модифицировать имеющийся функционал с непредсказуемыми последствиями, либо добавлять такой же функционал (по сути, дублировать код).

15. Что такое ISP?
Interface segregation principle. Many client-specific interfaces are better than one general-purpose interface.
При реализации интерфейса, сразу должно быть понятно, что конкретно должен уметь делать реализующий класс.

16. Расскажите о нарушениях принципе ISP?
Создают универсальные интерфейсы.

17. Последствия нарушения ISP?
При реализации этих универсальных интерфейсов, непонятно, что должны уметь делать реализующие их классы. К тому же поведение, которое не нужно в конкретном классе, но должно быть реализовано, выливается в итоге в пустые методы.

18. Что такое DIP?
Dependency inversion principle. One should depend upon abstractions, not concretions.
Конкретный класс должен быть унаследован от абстракции (реализовывать интерфейс), чтобы уже это абстракцией пользовались другие классы.
Таким образом, зависимость между классами инвертируется в зависимость от абстракции.
Перекликается с LSP.

19. Расскажите о нарушениях принципе DIP?
При разработке какого-нибудь функционала работают с конкретным классом.

20. Последствия нарушения DIP?
В последствии, когда возникнет необходимость в том, чтобы уже разработанный функционал мог работать с подобным, но другим классом, то нужно либо нарушать принцип OCP и модифицировать имеющийся функционал с непредсказуемыми последствиями, либо добавлять такой же функционал (по сути, дублировать код).

21. Расскажите что такое автоматическое тестирование?
Automation testing.
Автотесты выполняются по команде, не вручную. Для них создаются входные параметры и потом, при каждом обновлении приложения, автотесты прогоняются, проверяя, не повлияли ли модфикации на правильность работы.

22. Как в Java осуществляется автоматическое тестирование?
С помощью модульных и интеграционных тестов.

23. Что такое JUnit? Как использовать для тестирования?
JUnit - это фреймворк, который осуществляет модульное тестирование приложения.
В каждом классе (unit) мы можем протестировать его публичное поведение.
На каждый тестируемый класс создаётся тестовый класс с суффиксом Test.
В этом тестовом классе создаются тестирующие методы на все ключевые моменты. Имя метода должно давать понимание, какой случай он тестирует.
Внутри тестирующего метода три части - три "A":
    - Arrange - создаются необходимые данные (окружение);
    - Act - над данными производятся действия с помощью тестируемого функционала;
    - Assert - проверяется, совпадает ли результат с ожидаемым.

24. Что такое функциональное тестирование чем отличается от модульного?
Функциональное тестирование - это тестирование возможностей приложения, а не отдельных её модулей. Более общее тестирование.
Входные данные и ожидаемый результат для функционального тестирования определяются требованиями к возможностям приложения.
Оно может быть как автоматизированным, так и ручным.

25. Расскажите про принцип TDD?
Principle "Test-Driven Development" of Extreme programming.
Cycle of programming:
    - create tests;
    - run tests;
    - create only enough code for test completed;
    - run tests.
В упрощённом случае создаётся каркас приложения с заглушками.
Затем пишутся тесты в соответствиями с требованиями к приложению.
Затем пишется минимально необходимый код, чтобы тесты успешно выполнялись.
Затем, если появляются новые требования - цикл проходится сначала.

26. Расскажите про принцип BDD?
Behavior-driven development. Emerge from TDD. Входит в методологию Agile.
Предполагает совместную работу разработчиков, тестировщиков и бизнеса над проектом.
Ориентируется на требования к программе от заказчика (заказчик учавствует в BDD).
Основное отличие от TDD состоит в том, что при TDD код должен работать в соответствии с заданными в тестах условиями (которые могут устаревать по мере расширения приложения), а при BDD тесты постоянно модифицируются, чтобы выполнялись актуальные требования к системе.
Но по большей части методологии похожи.

27. Что такое тестирование черным ящиком
Тестирование, при котором тестируется приложение без рассмотрения его внутреннего устройства и реализации.
Может быть применено и в модульном тестировании и в функциональном.
